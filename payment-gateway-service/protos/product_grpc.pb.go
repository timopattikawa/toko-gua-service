// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: protos/product.proto

package master_service_tokogua

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataProductServer_FindDataProductById_FullMethodName = "/DataProductServer/FindDataProductById"
)

// DataProductServerClient is the client API for DataProductServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataProductServerClient interface {
	FindDataProductById(ctx context.Context, in *IdProduct, opts ...grpc.CallOption) (*Product, error)
}

type dataProductServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataProductServerClient(cc grpc.ClientConnInterface) DataProductServerClient {
	return &dataProductServerClient{cc}
}

func (c *dataProductServerClient) FindDataProductById(ctx context.Context, in *IdProduct, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, DataProductServer_FindDataProductById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataProductServerServer is the client API for DataProductServer service.
// All implementations must embed UnimplementedDataProductServerServer
// for forward compatibility
type DataProductServerServer interface {
	FindDataProductById(context.Context, *IdProduct) (*Product, error)
	mustEmbedUnimplementedDataProductServerServer()
}

// UnimplementedDataProductServerServer must be embedded to have forward compatible implementations.
type UnimplementedDataProductServerServer struct {
}

func (UnimplementedDataProductServerServer) FindDataProductById(context.Context, *IdProduct) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDataProductById not implemented")
}
func (UnimplementedDataProductServerServer) mustEmbedUnimplementedDataProductServerServer() {}

// UnsafeDataProductServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataProductServerServer will
// result in compilation errors.
type UnsafeDataProductServerServer interface {
	mustEmbedUnimplementedDataProductServerServer()
}

func RegisterDataProductServerServer(s grpc.ServiceRegistrar, srv DataProductServerServer) {
	s.RegisterService(&DataProductServer_ServiceDesc, srv)
}

func _DataProductServer_FindDataProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProductServerServer).FindDataProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProductServer_FindDataProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProductServerServer).FindDataProductById(ctx, req.(*IdProduct))
	}
	return interceptor(ctx, in, info, handler)
}

// DataProductServer_ServiceDesc is the grpc.ServiceDesc for DataProductServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataProductServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DataProductServer",
	HandlerType: (*DataProductServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindDataProductById",
			Handler:    _DataProductServer_FindDataProductById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/product.proto",
}
